/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'chunkMsg'
 * message type.
 * From TestSerialMsg.java, and extension from tinyOS legacy: 
 * https://github.com/x3ro/tinyos-legacy/blob/cdc0e7ba1cac505fcace33b974b2e0aca1ccc56a/broken/experimental/pal/net/tinyos/script/vm_specific/CapsuleChunkMsg.java
 */

public class chunkMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 66;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 138;

    /** Create a new chunkMsg of size 66. */
    public chunkMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new chunkMsg of the given data_length. */
    public chunkMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new chunkMsg with the given data_length
     * and base offset.
     */
    public chunkMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new chunkMsg using the given byte array
     * as backing store.
     */
    public chunkMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new chunkMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public chunkMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new chunkMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public chunkMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new chunkMsg embedded in the given message
     * at the given base offset.
     */
    public chunkMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new chunkMsg embedded in the given message
     * at the given base offset and length.
     */
    public chunkMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    // Message-type-specific access methods appear below.

    /**
     * Return the value (as a int) of the field 'chunkNum'
     */
    public int get_chunkNum() {
        return (int)getUIntBEElement(0, 16);
    }
    
    /**
     * Set the value of the field 'chunkNum'
     */
    public void set_chunkNum(int value) {
        setUIntBEElement(0, 16, value); //Offset is always zero.
    }

    /**
     * Return the offset (in bits) of the field 'chunk'
     */
    public static int offsetBits_chunk(int index1) {
        int offset = 16;
        if (index1 < 0 || index1 >= 64) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'chunk' as a short[]
     */
    public short[] get_chunk() {
        short[] tmp = new short[64];
        for (int index0 = 0; index0 < numElements_chunk(0); index0++) {
            tmp[index0] = getElement_chunk(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'chunk' from the given short[]
     */
    public void set_chunk(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_chunk(index0, value[index0]);
        }
    }
    
    /**
     * Return an element (as a short) of the array 'chunk'
     */
    public short getElement_chunk(int index1) {
        return (short)getUIntBEElement(offsetBits_chunk(index1), 8);
    }
    
    /**
     * Set an element of the array 'chunk'
     */
    public void setElement_chunk(int index1, short value) {
        setUIntBEElement(offsetBits_chunk(index1), 8, value);
    }

    /**
     * Return the number of elements in the array 'chunk'
     * for the given dimension.
     */
    public static int numElements_chunk(int dimension) {
        int array_dims[] = { 64,  };
          if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
          if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
          return array_dims[dimension];
      }
}
